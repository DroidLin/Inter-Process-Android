package com.android.inter.process.framework

import com.android.inter.process.framework.annotation.CustomCollector
import com.android.inter.process.framework.reflect.InvocationReceiver

typealias CallerFactory<T> = (FunctionCallAdapter) -> T

typealias ReceiverFactory<T> = (T) -> InvocationReceiver<T>

/**
 * @author: liuzhongao
 * @since: 2024/9/17 16:08
 */
interface ObjectPool {

    fun <T> putCallerFactory(clazz: Class<T>, callerFactory: CallerFactory<T>)

    fun <T> getCaller(clazz: Class<T>, functionCallAdapter: FunctionCallAdapter): T?

    fun <T> putReceiver(clazz: Class<T>, receiver: InvocationReceiver<T>)

    fun <T> getReceiver(clazz: Class<T>): InvocationReceiver<T>

    fun <T> putReceiverFactory(clazz: Class<T>, receiverFactory: ReceiverFactory<T>)

    fun <T> getReceiverBuilder(clazz: Class<T>): ReceiverFactory<T>?

    fun <T> putInstance(clazz: Class<T>, instance: T)

    fun <T> putInstance(clazz: Class<T>, instance: T, receiverFactory: ReceiverFactory<T>)

    fun <T> putInstanceFactory(clazz: Class<T>, serviceFactory: ServiceFactory<T>)

    /**
     * called and generated automatically by java spi.
     *
     * default implementations will be generated by kapt-kotlin or the ksp symbol component,
     * you can implements this interface and build your own logic.
     *
     * do not forget to annotated your own collector with [CustomCollector]
     */
    interface Collector {

        /**
         * collect objects from implementations, will be called at initialization.
         */
        fun collect()
    }
}